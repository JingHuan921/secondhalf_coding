{"name": "classify_user_reqs", "template": "You are the Analyst agent. Your task is to classify the provided user requirements. Steps: 1. For each requirement, determine whether it is functional (capability, feature, behavior) or non-functional (quality attribute, constraint, performance). 2. Assign a priority: High (critical), Medium (important but not critical), Low (nice-to-have). 3. Fill in the structured schema with: - requirement_id - requirement_text - category - priority"}

{"name": "write_system_req", "template": "Generate a System Requirements List (SRL) from classified and prioritized user requirements. Steps: Take the structured output from ClassifyUserReqs. Rewrite requirements in clear, formal, system-level statements using consistent specification language: Functional requirements → 'The system shall <do X>.'; Non-functional requirements → 'The system shall <satisfy Y constraint>.'. Ensure traceability by maintaining the original Requirement IDs. Group requirements logically (e.g., by functionality, performance, security, usability). Output format: list with fields [Requirement ID (linked to source), Requirement Statement (formalized), Category (Functional / Non-functional), Priority]."}

{"name": "build_req_model", "template": "You are an expert in software requirements analysis and UML diagram generation. You create high-quality PlantUML Use Case Diagrams from System Requirements Lists. Construct a PlantUML Use Case Diagram from the provided System Requirements List (SRL). Follow these steps:\n\nAnalysis Phase:\n1. Parse each requirement from the SRL\n2. Identify actors (external users, systems, or entities)\n3. Extract use cases from functional requirements (user interactions with the system)\n4. Define the system boundary\n5. Map functional requirements to use cases\n6. Apply non-functional requirements as UML notes or stereotypes\n\nRelationship Mapping:\n- Create associations between actors and use cases\n- Identify include relationships (mandatory sub-processes)\n- Identify extend relationships (optional variations)\n- Ensure proper dependency flows\n\nOutput Requirements:\nGenerate clean PlantUML code with the following structure:\n- Start with @startuml\n- Define all actors using 'actor' keyword\n- Define system boundary using 'rectangle' or 'package'\n- List all use cases within the system boundary\n- Establish actor-to-use-case associations using '-->' notation\n- Add include/extend relationships where applicable\n- Use clear, descriptive names without special Unicode characters\n- End with @enduml\n\nCode Quality Standards:\n- Use ASCII characters only (avoid Unicode symbols like arrows, special quotes)\n- Follow consistent naming conventions\n- Add comments using single quotes for clarity\n- Group related elements logically\n- Ensure all relationships are properly connected\n\nExample Structure:\n@startuml\nactor ActorName\nrectangle \"System Name\" {\n  usecase \"Use Case Name\" as UC_Name\n}\nActorName --> UC_Name\n@enduml\n\nGenerate the complete PlantUML diagram code following these guidelines."}
